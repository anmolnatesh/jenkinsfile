Jenkins pipeline job are defined in groovy language 
Jenkinsfile is the file where we define our pipeline job 

Declarative Pipeline 
	- New way of writing groovy declaratives 
	- most of the options are predefined in declarative pipeline 
	- we always write in a file called Jenkinsfile which is chechedin a SCM (git)
	- all the code is defined inside pipeline block 

Scripted Pipeline 
	- Traditional way of writing groovy script 
	- most of the options or configuration should be done manually.
	- Most of the time we use inline block to write scripted pipeline.
	- All the code is defined inside node block

Jenkinsfile	
	- It is the file in which we write all our job configuration in groovy.
	- In our company we are using declarative piepline in Jenkinsfile and we are maintaining 
	  Jenkinsfile through git.	
	  
How to configure a piepline job 
	1. We can add pipeline configuration in 2 ways 
		a. We write all the configuration inside the pipeline job in job ui only.
		b. We can write all the configuration in a file called Jenkinsfile and we can add that 
		   from a SCM/Version control 
	2. We are using only declarative pipeline type in our company.	   

Declarative Pipeline
	- All the code should be inside pipeline block 
	- The mandatory components of pipeline will be agent, stages, stage, steps
	
	Agent
		- An agent is a declarative used to defince the execution method for piepline stages.
		- agent is the one which tell stages to execute on which node and its executro.
		- Agent can be specified at two levels 
				a. pipeline level 
				b. Stage level
				
		Types of agents.
			any - Runs stages on any available node executor. 
			
			pipeline {
				agent any 
				stages {
					stage('BUILD') {
						steps {
							sh '''
								pwd
								sleep 5
								echo This is the fist stage: BUILD
							'''
						}	
					}
					
					stage('TEST') {
						steps {
							sh '''
								pwd
								sleep 5
								echo This is the fist stage: TEST
							'''
						}	
					}
					
					stage('DEPLOY') {
						steps {
							sh '''
								pwd
								sleep 5
								echo This is the fist stage: DEPLOY
							'''
						}	
					}
				}
			}
		
		none 
			- This is applied at the pipeline level and It means that we need to manually 
			  define the agent for each and every stage.
		
		pipeline {
			agent none 
			stages {
				stage('BUILD') {
					agent { label 'agent1' }
					steps {
						sh '''
							pwd
							sleep 5
							echo This is the fist stage: BUILD
						'''
					}	
				}
				
				stage('TEST') {
					agent { label 'agent2' }
					steps {
						sh '''
							pwd
							sleep 5
							echo This is the fist stage: TEST
						'''
					}	
				}
				
				stage('DEPLOY') {
					agent { label 'master' }
					steps {
						sh '''
							pwd
							sleep 5
							echo This is the fist stage: DEPLOY
						'''
					}	
				}
			}
		}
		
		Label 
			- It executes the stage/pipeline on the labeled node.
			
			pipeline {
				agent any
				stages {
					stage('BUILD') {
						steps {
							sh '''
								pwd
								sleep 5
								echo This is the fist stage: BUILD
							'''
						}	
					}
					
					stage('TEST') {
						steps {
							sh '''
								pwd
								sleep 5
								echo This is the fist stage: TEST
							'''
						}	
					}
					
					stage('DEPLOY') {
						steps {
							sh '''
								pwd
								sleep 5
								echo This is the fist stage: DEPLOY
							'''
						}	
					}
				}
			}
		Docker 	
		
		
Use blueocean plugin to get a better dashboard for pipeline	- core/web, api, Just blueocean	